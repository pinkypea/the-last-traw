name: Actions Runner Controller
on:
  push:
    branches: main

env:
  KANIKO_CACHE_ARGS: "--cache=true --cache-copy-layers=true --cache-ttl=24h"

jobs:
  build-push-frontend:
    runs-on: arc-runner-set
    container:
      image: gcr.io/kaniko-project/executor:v1.22.0-debug 
    permissions:
      contents: read
    steps:

    # Build and push frontend image with Kaniko
    - name: Build and push frontend image with Kaniko
      run: |
        # Create Docker config for authentication
        cat <<EOF > /kaniko/.docker/config.json
        {
          "auths": {
            "https://index.docker.io/v1/": {
              "auth": "$(echo -n "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" | base64 )"
            }
          }
        }
        EOF

        # Run Kaniko to build and push the frontend image
        /kaniko/executor --dockerfile="./frontend/Dockerfile" \
          --context="${{ github.repositoryUrl }}#${{ github.ref }}#${{ github.sha }}"  \
          --destination="${{ secrets.DOCKERHUB_USERNAME }}/the-last-straw-frontend:$(echo ${{ github.sha }} | head -c 7)" \
          ${{ env.KANIKO_CACHE_ARGS }} \
          --push-retry 5 \
          --cleanup

    # - name: Clean
    #   run: |
    #     pwd
    #     rm -rf $GITHUB_ACTION_PATH
    #     ls $GITHUB_PATH


  build-push-backend:
    runs-on: arc-runner-set
    needs: build-push-frontend
    container:
      image: gcr.io/kaniko-project/executor:v1.22.0-debug 
    permissions:
      contents: read
    steps:

    # Build and push backend image with Kaniko
    - name: Build and push backend image with Kaniko
      run: |
        # Create Docker config for authentication
        cat <<EOF > /kaniko/.docker/config.json
        {
          "auths": {
            "https://index.docker.io/v1/": {
              "auth": "$(echo -n "${{ secrets.DOCKERHUB_USERNAME }}:${{ secrets.DOCKERHUB_TOKEN }}" | base64 )"
            }
          }
        }
        EOF

        # Run Kaniko to build and push the backend image
        /kaniko/executor --dockerfile="./backend/Dockerfile" \
          --context="${{ github.repositoryUrl }}#${{ github.ref }}#${{ github.sha }}" \
          --destination="${{ secrets.DOCKERHUB_USERNAME }}/the-last-straw-backend:$(echo ${{ github.sha }} | head -c 7)" \
          ${{ env.KANIKO_CACHE_ARGS }} \
          --push-retry 5 \
          --cleanup

    # - name: Clean
    #   run: |
    #     pwd
    #     rm -rf $GITHUB_ACTION_PATH
    #     ls $GITHUB_PATH

  deploy-to-staging:
    runs-on: arc-runner-set
    needs: [build-push-frontend, build-push-backend]
    steps:
    - name: Install dependencies
      run: |
        cd $HOME
        sudo apt-get update
        sudo apt-get install -y curl libcurl4
        sudo apt-get install -y apt-transport-https ca-certificates curl gnupg

    - name: Install kubectl
      run: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        sudo chmod 644 /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
        sudo chmod 644 /etc/apt/sources.list.d/kubernetes.list
        sudo apt-get update
        sudo apt-get install -y kubectl
        kubectl version --client

    - name: Config kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.K8S_CONFIG }}" > ~/.kube/config
        export KUBECONFIG=/etc/kubernetes/admin.conf
        export PATH="kubectl:$PATH"
        echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
        kubectl get node -owide

    - name: Checkout
      uses: actions/checkout@v3

    - name: Deploy to staging
      run: |
        sed -i "s/TAG/$(echo ${{ github.sha }} | head -c 7)/g" kustomize/backend-deployment.yaml
        sed -i "s/TAG/$(echo ${{ github.sha }} | head -c 7)/g" kustomize/frontend-deployment.yaml
        kubectl apply -k ./kustomize